name: CI
on: [push, pull_request]
env:
  BASEDIR: https://raw.githubusercontent.com/open-contracting/standard-maintenance-scripts/main
jobs:
  build:
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    runs-on: ubuntu-20.04
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432/tcp
      rabbitmq:
        image: rabbitmq:latest
        options: >-
          --health-cmd "rabbitmqctl node_health_check"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5672/tcp
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: 3.6
      - uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements_dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - run: |
          psql postgresql://postgres:postgres@localhost:${{ job.services.postgres.ports[5432] }}/postgres -f migrations/001_base.sql -f migrations/002_constraints.sql
          psql postgresql://postgres:postgres@localhost:${{ job.services.postgres.ports[5432] }}/postgres -c "\copy exchange_rates (valid_on, rates) from 'tools/exchange_rates_dump.csv' delimiter ',' csv header;"
      - run: pip install -r requirements_dev.txt
      - run: pytest --cov checker --cov contracting_process --cov core --cov dataset --cov extractor --cov maintenance_scripts --cov registry --cov time_variance --cov tools
        if: always()
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:${{ job.services.postgres.ports[5432] }}/postgres
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: coveralls --service=github

  docker:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Get the tag name
        run: echo "TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Log in to GitHub Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build container image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          file: Dockerfile
          tags: |
            ghcr.io/open-contracting/pelican-backend:latest
            ghcr.io/open-contracting/pelican-backend:${{ env.TAG }}
